# Adapted from 
# Copyright [2018] [Phil Chen]
# https://github.com/getcft/aws-elb-to-ec2-target-group-cf-template/blob/master/elb-to-ec2-target-group-cf-template.yml

# Modified template by ntno
# https://github.com/ntno

######################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
######################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: deploys the hello-world application to a public subnet in a new VPC
Parameters:
  SSHKeyName:
    Description: name of the ec2 key provisioned during prerequisite steps
    Type: 'AWS::EC2::KeyPair::KeyName'
  EcrRepoName:
    Description: name of the ECR repository which contains the application
    Type: String
    Default: hello-world
  ImageTag: 
    Description: ECR repository tag for the application image 
    Type: String
    Default: latest
  LogGroupName:
    Description: name of the cloud watch log group to send application logs to
    Type: String
    Default: hello-world-docker
  AmazonLinux2Ami:
    Description: | 
      AMI id for the latest linux 2 ami with extras installed.
      See `aws ssm get-parameter --name "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2" --region us-east-1`
    Type: String
    Default: 'ami-00c03f7f7f2ec15c3'
    #us-east-1: ami-0b69ea66ff7391e80
    #us-east-2: ami-00c03f7f7f2ec15c3
  DomainTag:
    Type: String
    Description: resource tag for organization
  ProjectTag:
    Type: String
    Description: resource tag for organization
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '${LogGroupName}-${AWS::StackName}'
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${EcrRepoName}-ec2-service-role-${AWS::StackName}'
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess      #TODO - restrict me
      Policies: 
        - PolicyName: 'Ec2InstancePermissions'
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: ReadFromEcrRepoPermissions
                Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                Resource: 
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepoName}'
              - Sid: EcrLoginPermission
                Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Sid: ReadFromParameterStorePermissions
                Effect: Allow
                Action:
                  - 'ssm:GetParameterHistory'
                  - 'ssm:GetParametersByPath'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                  - 'ssm:DescribeParameters'
                Resource: '*'                   #TODO - restrict me
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: 'default'
        Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PubSubnetZoneA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: '10.0.10.0/24'
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  RouteTablePubZoneA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  RoutePubZoneA:
    DependsOn:
        - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePubZoneA
  RouteAssociationPubSubnetZoneA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        SubnetId: !Ref PubSubnetZoneA
        RouteTableId: !Ref RouteTablePubZoneA
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SSH and Ports 80/443'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0                
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${EcrRepoName}-ec2-instance-profile-${AWS::StackName}'
      Path: /
      Roles:
        - !Ref Ec2InstanceRole
  AmazonLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      DependsOn: !Ref LogGroup
      ImageId:
        !Ref AmazonLinux2Ami
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t2.nano
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName:
        Ref: SSHKeyName
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref EC2SecurityGroup
        SubnetId:
          Ref: PubSubnetZoneA
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config ----- very important!  set to 'always' to run at every ec2 restart
          cloud_final_modules:
          - [scripts-user, always]

          output:
              init:
                  output: "> /var/log/cloud-init.out"
                  error: "> /var/log/cloud-init.err"
              config: "tee -a /var/log/cloud-config.log"
              final:
                  - ">> /var/log/cloud-final.out"
                  - "/var/log/cloud-final.err"
          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          /bin/echo $(date) start >> /tmp/debug.txt

          #install required modules
          sudo yum update -y
          sudo yum install -y aws-cfn-bootstrap
          sudo amazon-linux-extras install docker

          #stop the docker service and remove local-kv.db to avoid 'port in use' errors
          sudo service docker stop
          sudo rm /var/lib/docker/network/files/local-kv.db

          #restart docker
          sudo service docker start

          #add 'ec2-user' to the docker group
          sudo usermod -a -G docker ec2-user

          #log into ecr
          $(aws ecr get-login --no-include-email --region ${AWS::Region})

          #pull specified image
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:${ImageTag}

          #start container with open ports 443 and 80
          #send logs to the specified cloudwatch log group
          docker run --log-driver=awslogs --log-opt awslogs-group=${LogGroupName} \
            -p 443:443 \
            -p 80:80 \
            -d \
            ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:${ImageTag}
          
          /bin/echo $(date) done >> /tmp/debug.txt

          #signal cloudformation that the bootscript has finished
          /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}
          --//

Outputs:
  VPC:
    Description: 'Virtual Private Cloud'
    Value: !Ref VPC
  EC2Instance:
    Description: 'EC2 Instance'
    Value: !Ref AmazonLinuxInstance