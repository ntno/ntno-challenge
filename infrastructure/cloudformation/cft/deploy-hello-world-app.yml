# security groups / vpc / routing configs adpated from Phil Chen
# Copyright [2018] [Phil Chen]
# https://github.com/getcft/aws-elb-to-ec2-target-group-cf-template/blob/master/elb-to-ec2-target-group-cf-template.yml

# Modified template by ntno
# https://github.com/ntno

######################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
######################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: provisions ec2 instance, public subnet, VPC for app deployment via codedeploy
Parameters:
  SSHKeyName:
    Description: name of the ec2 key provisioned during prerequisite steps
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ""
  AllowSSH:
    Description: Do you want to open port 22 for ssh? (yes/no)
    Type: String
    Default: "no"
    AllowedValues: ["yes", "no"]
  EcrRepoName:
    Description: name of the ECR repository which contains the application
    Type: String
    Default: hello-world
  ImageTag: 
    Description: ECR repository tag for the application image 
    Type: String
    Default: latest
  LogGroupName:
    Description: name of the cloud watch log group to send application logs to
    Type: String
  AmazonLinux2Ami:
    Description: | 
      AMI id for the latest linux 2 ami with extras installed.
      See `aws ssm get-parameter --name "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2" --region us-east-1`
    Type: String
    Default: 'ami-0b69ea66ff7391e80'
    #us-east-1: ami-0b69ea66ff7391e80
    #us-east-2: ami-00c03f7f7f2ec15c3
  CodeDeployResourceKitBucketName:
    #https://docs.aws.amazon.com/codedeploy/latest/userguide/resource-kit.html#resource-kit-bucket-names
    Description: name of bucket which contains install kit for codedeploy
    Type: String
    Default: 'aws-codedeploy-us-east-1'
    #us-east-1: aws-codedeploy-us-east-1
    #us-east-2: aws-codedeploy-us-east-2
  DomainTag:
    Type: String
    Description: resource tag for organization
  ProjectTag:
    Type: String
    Description: resource tag for organization
  
Conditions:
  NeedsSSH: !Equals [ !Ref AllowSSH, "yes" ]
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref LogGroupName
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${EcrRepoName}-ec2-service-role-${AWS::StackName}'
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess      #TODO - restrict me
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess        #TODO - restrict me
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: 'default'
        Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PubSubnetZoneA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      CidrBlock: '10.0.10.0/24'
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  RouteTablePubZoneA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  RoutePubZoneA:
    DependsOn:
        - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePubZoneA
  RouteAssociationPubSubnetZoneA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        SubnetId: !Ref PubSubnetZoneA
        RouteTableId: !Ref RouteTablePubZoneA
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !If [NeedsSSH, 'open: ssh (22) and ports 80/443', 'open: ports 80 and 443' ] 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  
        - !If [NeedsSSH, { IpProtocol: 'tcp', FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }, !Ref "AWS::NoValue" ]
      Tags: [{Key: domain, Value: !Ref DomainTag}, {Key: project, Value: !Ref ProjectTag}]
  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${EcrRepoName}-ec2-instance-profile-${AWS::StackName}'
      Path: /
      Roles:
        - !Ref Ec2InstanceRole
  AmazonLinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        !Ref AmazonLinux2Ami
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t2.nano
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: !If [NeedsSSH, !Ref SSHKeyName, !Ref "AWS::NoValue" ]
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref EC2SecurityGroup
        SubnetId:
          Ref: PubSubnetZoneA
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config ----- very important!  set to 'always' to run at every ec2 restart
          cloud_final_modules:
          - [scripts-user, always]

          output : { all : '| tee -a /var/log/cloud-init-output.log' }
          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="custom-codedeploy-config.txt"

          #!/bin/bash
          if [ ! -f /home/ec2-user/custom-codedeploy-config.txt ]
          then
            cat << EOF > /home/ec2-user/custom-codedeploy-config.txt
          ---
          :log_aws_wire: false
          :log_dir: '/var/log/aws/codedeploy-agent/'
          :pid_dir: '/opt/codedeploy-agent/state/.pid/'
          :program_name: codedeploy-agent
          :root_dir: '/home/ec2-user'
          :verbose: true
          :wait_between_runs: 1
          :proxy_uri:
          :max_revisions: 5
          EOF
          fi
          --//

          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          /bin/echo $(date) start >> /tmp/debug.txt

          #install required modules
          sudo yum update -y
          sudo yum install -y aws-cfn-bootstrap
          sudo yum install -y ruby wget 
          sudo amazon-linux-extras install docker

          #install codedeploy agent
          cd /home/ec2-user
          wget https://${CodeDeployResourceKitBucketName}.s3.${AWS::Region}.amazonaws.com/latest/install
          ls
          sudo ./install auto
          sudo service codedeploy-agent stop

          #set custom log settings
          sudo cp /etc/codedeploy-agent/conf/codedeployagent.yml /home/ec2-user/codedeployagent.yml.backup
          sudo cp /home/ec2-user/custom-codedeploy-config.txt /etc/codedeploy-agent/conf/codedeployagent.yml

          #restart codedeploy agent
          sudo service codedeploy-agent restart
            
          #check the status of the codedeploy agent after restart
          sudo service codedeploy-agent start
          sudo service codedeploy-agent status

          #show the current config

          #stop the docker service and remove local-kv.db to avoid 'port in use' errors
          sudo service docker stop
          sudo rm /var/lib/docker/network/files/local-kv.db

          #restart docker
          sudo service docker start

          #add 'ec2-user' to the docker group
          sudo usermod -a -G docker ec2-user

          #write log group name to home directory for use during app deployment
          /bin/echo ${LogGroupName}  >> /home/ec2-user/log-group-name.txt 
          sudo chmod 400 /home/ec2-user/log-group-name.txt 

          /bin/echo $(date) done >> /tmp/debug.txt
          --//

Outputs:
  EC2Instance:
    Description: 'EC2 Instance'
    Value: !Ref AmazonLinuxInstance
  PublicDns:
    Description: 'publically available address for the web app'
    Value: !GetAtt 
      - AmazonLinuxInstance
      - PublicDnsName